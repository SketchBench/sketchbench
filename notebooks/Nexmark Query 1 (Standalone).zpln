{
  "paragraphs": [
    {
      "text": "%md\n## Query: Statistics of each Auction over a day. Calculates count, min, max, avg and sum of all bids.\n\n**CQL:**\n\n```sql\nSELECT\n  auction ,\n  DATE_FORMAT ( dateTime , ’yyyy -MM -dd ’) AS ‘day ‘,\n  COUNT (*) AS total_bids ,\n  MIN ( price ) AS min_price ,\n  MAX ( price ) AS max_price ,\n  AVG ( price ) AS avg_price ,\n  SUM ( price ) AS sum_price\n FROM\n  BID [ ROWS UNBOUNDED ]\n GROUP BY\n  auction ,\n  DATE_FORMAT ( dateTime , ’yyyy -MM -dd ’);\n```",
      "user": "anonymous",
      "dateUpdated": "2021-07-28T05:35:33+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Query: Statistics of each Auction over a day. Calculates count, min, max, avg and sum of all bids.</h2>\n<p><strong>CQL:</strong></p>\n<pre><code class=\"language-sql\">SELECT\n  auction ,\n  DATE_FORMAT ( dateTime , ’yyyy -MM -dd ’) AS ‘day ‘,\n  COUNT (*) AS total_bids ,\n  MIN ( price ) AS min_price ,\n  MAX ( price ) AS max_price ,\n  AVG ( price ) AS avg_price ,\n  SUM ( price ) AS sum_price\n FROM\n  BID [ ROWS UNBOUNDED ]\n GROUP BY\n  auction ,\n  DATE_FORMAT ( dateTime , ’yyyy -MM -dd ’);\n</code></pre>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1627442181603_936212460",
      "id": "paragraph_1627432435328_550499922",
      "dateCreated": "2021-07-28T03:16:21+0000",
      "dateStarted": "2021-07-28T05:35:33+0000",
      "dateFinished": "2021-07-28T05:35:36+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:184"
    },
    {
      "title": "Daily Auction Statistics",
      "text": "%spark\nimport org.apache.kafka.clients.consumer.ConsumerRecord\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport org.apache.spark.streaming.kafka010._\nimport org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent\nimport org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe\nimport org.apache.spark.SparkContext\n\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.types.{StringType, StructField, StructType, DoubleType}\n\nimport org.apache.kafka.clients.consumer.ConsumerConfig\nimport org.apache.kafka.common.serialization.StringDeserializer\n\nimport org.apache.spark.sql.SQLContext\n\nimport org.apache.spark.util.LongAccumulator\nimport org.apache.spark.streaming._\n\nimport org.apache.spark.ml.feature.QuantileDiscretizer\n\nimport scala.util.parsing.json.JSON\nimport java.util.{Calendar, Date}\nimport java.text.SimpleDateFormat\n\n\nval r = scala.util.Random\nval groupId = s\"stream-nexmark-v${r.nextInt.toString}\"\n \n\nval runDurtion = 300000\nval windowDuration = 120\nval checkpointDuration = 120\nval microbatchDuration = 2\nval topic = s\"NEXMarkTest1\"\nval kafkaEndpoint = s\"kafka:9092\"\nval checkpointLocation = s\"hdfs://namenode:9000/tmp/checkpoint/\"+groupId\n\nval ssc = new StreamingContext(sc, Seconds(microbatchDuration))\n\nval sqlContext = new SQLContext(sc)\nimport sqlContext.implicits._\n\nval kafkaParams = Map[String, Object](\n  \"bootstrap.servers\" -> kafkaEndpoint,\n  \"key.deserializer\" -> classOf[StringDeserializer],\n  \"value.deserializer\" -> classOf[StringDeserializer],\n  \"group.id\" -> groupId,\n  \"auto.offset.reset\" -> \"latest\",\n  \"enable.auto.commit\" -> (false: java.lang.Boolean)\n)\n\nval topics = Array(topic)\nval stream = KafkaUtils.createDirectStream[String, String](\n  ssc,\n  PreferConsistent,\n  Subscribe[String, String](topics, kafkaParams)\n)\n\nssc.checkpoint(\"hdfs://namenode:9000/tmp/checkpoint-test/\") \n\nval dateFormat = new SimpleDateFormat(\"YYYY-MM-d\")\n\nval messages = stream\n    .map(record => record.value)\n    .flatMap(record => {\n         JSON.parseFull(record).map(rawMap =>{\n            val map = rawMap.asInstanceOf[Map[String,Map[String,Double]]]\n            val inMap = map.get(\"event\")\n            val dt = new Date(inMap.get(\"time\").toLong)\n            ((dateFormat.format(dt), inMap.get(\"auction_id\").toInt), inMap.get(\"bid\").toInt)\n         } )\n    })\n\nmessages.checkpoint(Seconds(checkpointDuration))\n\ndef updateStateFunc(bids: Seq[(Int)], runningstate: Option[(Long,Long,Long,Double,Long)]):  Option[(Long,Long,Long,Double,Long)] = {\n\n    val previousState = runningstate.getOrElse((0l,1234567l,0l,0d,0l))\n    var newState = previousState\n    if(!bids.isEmpty) {\n\n        val count = previousState._1\n        val min = previousState._2\n        val max = previousState._3\n        val avg = previousState._4\n        val sum = previousState._5\n        \n        val currCount = bids.length\n        val currmin = bids.min\n        val currmax = bids.max\n        val currsum = bids.sum\n        \n        val newCount = count + currCount\n        val runavg = ((currsum + sum).toDouble/newCount)\n    \n        val newMin =  if (currmin <= min && currmin !=0) currmin else min\n        val newMax =  if (currmax > max) currmax else max\n        val newSum = sum + currsum\n        newState = (newCount,newMin,newMax,runavg,newSum)\n    }\n        \n    Some(newState)\n}\n\nval result = messages.updateStateByKey(updateStateFunc _)\n\nval windowedResult = result.window(Seconds(windowDuration),Seconds(windowDuration))\n\nwindowedResult.print(10)\n\nssc.start()  \nssc.awaitTerminationOrTimeout(runDurtion)\nssc.stop()",
      "user": "anonymous",
      "dateUpdated": "2021-07-31T04:08:25+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1627442181608_1103844555",
      "id": "paragraph_1627434483639_1937179438",
      "dateCreated": "2021-07-28T03:16:21+0000",
      "dateStarted": "2021-07-31T04:02:32+0000",
      "dateFinished": "2021-07-31T04:07:56+0000",
      "status": "FINISHED",
      "$$hashKey": "object:185",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[33mwarning: \u001b[0mthere was one deprecation warning (since 1.0.6)\n\u001b[33mwarning: \u001b[0mthere was one deprecation warning (since 2.0.0)\n\u001b[33mwarning: \u001b[0mthere were two deprecation warnings in total; for details, enable `:setting -deprecation' or `:replay -deprecation'\n-------------------------------------------\nTime: 1627704240000 ms\n-------------------------------------------\n((2021-07-31,22339),(2,244,250,247.0,494))\n((2021-07-31,20364),(1,304,304,304.0,304))\n((2021-07-31,25778),(1,33,33,33.0,33))\n((2021-07-31,24603),(1,225,225,225.0,225))\n((2021-07-31,14728),(1,340,340,340.0,340))\n((2021-07-31,19309),(1,351,351,351.0,351))\n((2021-07-31,20906),(1,111,111,111.0,111))\n((2021-07-31,18121),(1,320,320,320.0,320))\n((2021-07-31,24977),(1,69,69,69.0,69))\n((2021-07-31,20803),(2,244,266,255.0,510))\n...\n\n-------------------------------------------\nTime: 1627704360000 ms\n-------------------------------------------\n((2021-07-31,22339),(3,244,259,251.0,753))\n((2021-07-31,20364),(1,304,304,304.0,304))\n((2021-07-31,25778),(4,33,67,51.5,206))\n((2021-07-31,24977),(3,69,108,89.33333333333333,268))\n((2021-07-31,14728),(1,340,340,340.0,340))\n((2021-07-31,23346),(2,108,129,118.5,237))\n((2021-07-31,20906),(1,111,111,111.0,111))\n((2021-07-31,18712),(4,199,226,211.25,845))\n((2021-07-31,20803),(2,244,266,255.0,510))\n((2021-07-31,27524),(4,97,124,112.75,451))\n...\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport org.apache.spark.streaming.kafka010._\nimport org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent\nimport org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe\nimport org.apache.spark.SparkContext\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.types.{StringType, StructField, StructType, DoubleType}\nimport org.apache.kafka.clients.consumer.ConsumerConfig\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport org.apache.spark.sql.SQLContext\nimport org.apache.spark.util.LongAccumulator\nimport org.apache.spark.streaming._\nimport org.apache.spark.ml.feature.QuantileDiscretizer\nimport scala.util.parsing.json.JS...\n"
          }
        ]
      }
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2021-07-28T03:16:21+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1627442181610_394179989",
      "id": "paragraph_1627436681375_367010683",
      "dateCreated": "2021-07-28T03:16:21+0000",
      "status": "READY",
      "$$hashKey": "object:186"
    }
  ],
  "name": "Nexmark Query 1 (Standalone)",
  "id": "2GDWP1QF7",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/Nexmark Query 1 (Standalone)"
}